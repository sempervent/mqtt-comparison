// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data.proto

#include "sensor_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mqtt_comparison {
PROTOBUF_CONSTEXPR SensorData::SensorData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sensor_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.humidity_)*/0
  , /*decltype(_impl_.pressure_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDataDefaultTypeInternal() {}
  union {
    SensorData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDataDefaultTypeInternal _SensorData_default_instance_;
}  // namespace mqtt_comparison
static ::_pb::Metadata file_level_metadata_sensor_5fdata_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sensor_5fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sensor_5fdata_2eproto = nullptr;

const uint32_t TableStruct_sensor_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mqtt_comparison::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mqtt_comparison::SensorData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::mqtt_comparison::SensorData, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::mqtt_comparison::SensorData, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::mqtt_comparison::SensorData, _impl_.humidity_),
  PROTOBUF_FIELD_OFFSET(::mqtt_comparison::SensorData, _impl_.pressure_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mqtt_comparison::SensorData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mqtt_comparison::_SensorData_default_instance_._instance,
};

const char descriptor_table_protodef_sensor_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sensor_data.proto\022\017mqtt_comparison\"k\n\n"
  "SensorData\022\021\n\ttimestamp\030\001 \001(\001\022\021\n\tsensor_"
  "id\030\002 \001(\t\022\023\n\013temperature\030\003 \001(\001\022\020\n\010humidit"
  "y\030\004 \001(\001\022\020\n\010pressure\030\005 \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_sensor_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensor_5fdata_2eproto = {
    false, false, 153, descriptor_table_protodef_sensor_5fdata_2eproto,
    "sensor_data.proto",
    &descriptor_table_sensor_5fdata_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_sensor_5fdata_2eproto::offsets,
    file_level_metadata_sensor_5fdata_2eproto, file_level_enum_descriptors_sensor_5fdata_2eproto,
    file_level_service_descriptors_sensor_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensor_5fdata_2eproto_getter() {
  return &descriptor_table_sensor_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensor_5fdata_2eproto(&descriptor_table_sensor_5fdata_2eproto);
namespace mqtt_comparison {

// ===================================================================

class SensorData::_Internal {
 public:
};

SensorData::SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:mqtt_comparison.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.humidity_){}
    , decltype(_impl_.pressure_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sensor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensor_id().empty()) {
    _this->_impl_.sensor_id_.Set(from._internal_sensor_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pressure_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.pressure_));
  // @@protoc_insertion_point(copy_constructor:mqtt_comparison.SensorData)
}

inline void SensorData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sensor_id_){}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.humidity_){0}
    , decltype(_impl_.pressure_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sensor_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensor_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:mqtt_comparison.SensorData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_id_.Destroy();
}

void SensorData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:mqtt_comparison.SensorData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_id_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pressure_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.pressure_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sensor_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mqtt_comparison.SensorData.sensor_id"));
        } else
          goto handle_unusual;
        continue;
      // double temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double humidity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mqtt_comparison.SensorData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // string sensor_id = 2;
  if (!this->_internal_sensor_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor_id().data(), static_cast<int>(this->_internal_sensor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mqtt_comparison.SensorData.sensor_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sensor_id(), target);
  }

  // double temperature = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_temperature(), target);
  }

  // double humidity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_humidity = this->_internal_humidity();
  uint64_t raw_humidity;
  memcpy(&raw_humidity, &tmp_humidity, sizeof(tmp_humidity));
  if (raw_humidity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_humidity(), target);
  }

  // double pressure = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pressure = this->_internal_pressure();
  uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_pressure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mqtt_comparison.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mqtt_comparison.SensorData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensor_id = 2;
  if (!this->_internal_sensor_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_id());
  }

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  // double temperature = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 8;
  }

  // double humidity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_humidity = this->_internal_humidity();
  uint64_t raw_humidity;
  memcpy(&raw_humidity, &tmp_humidity, sizeof(tmp_humidity));
  if (raw_humidity != 0) {
    total_size += 1 + 8;
  }

  // double pressure = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pressure = this->_internal_pressure();
  uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorData::GetClassData() const { return &_class_data_; }


void SensorData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorData*>(&to_msg);
  auto& from = static_cast<const SensorData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mqtt_comparison.SensorData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sensor_id().empty()) {
    _this->_internal_set_sensor_id(from._internal_sensor_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_temperature = from._internal_temperature();
  uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_humidity = from._internal_humidity();
  uint64_t raw_humidity;
  memcpy(&raw_humidity, &tmp_humidity, sizeof(tmp_humidity));
  if (raw_humidity != 0) {
    _this->_internal_set_humidity(from._internal_humidity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pressure = from._internal_pressure();
  uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    _this->_internal_set_pressure(from._internal_pressure());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mqtt_comparison.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensor_id_, lhs_arena,
      &other->_impl_.sensor_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorData, _impl_.pressure_)
      + sizeof(SensorData::_impl_.pressure_)
      - PROTOBUF_FIELD_OFFSET(SensorData, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_5fdata_2eproto_getter, &descriptor_table_sensor_5fdata_2eproto_once,
      file_level_metadata_sensor_5fdata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mqtt_comparison
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mqtt_comparison::SensorData*
Arena::CreateMaybeMessage< ::mqtt_comparison::SensorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mqtt_comparison::SensorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
