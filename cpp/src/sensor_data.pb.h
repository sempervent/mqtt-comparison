// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_5fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_5fdata_2eproto;
namespace mqtt_comparison {
class SensorData;
struct SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
}  // namespace mqtt_comparison
PROTOBUF_NAMESPACE_OPEN
template<> ::mqtt_comparison::SensorData* Arena::CreateMaybeMessage<::mqtt_comparison::SensorData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mqtt_comparison {

// ===================================================================

class SensorData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mqtt_comparison.SensorData) */ {
 public:
  inline SensorData() : SensorData(nullptr) {}
  ~SensorData() override;
  explicit PROTOBUF_CONSTEXPR SensorData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorData(const SensorData& from);
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SensorData& from) {
    SensorData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mqtt_comparison.SensorData";
  }
  protected:
  explicit SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorIdFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kTemperatureFieldNumber = 3,
    kHumidityFieldNumber = 4,
    kPressureFieldNumber = 5,
  };
  // string sensor_id = 2;
  void clear_sensor_id();
  const std::string& sensor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensor_id();
  PROTOBUF_NODISCARD std::string* release_sensor_id();
  void set_allocated_sensor_id(std::string* sensor_id);
  private:
  const std::string& _internal_sensor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensor_id(const std::string& value);
  std::string* _internal_mutable_sensor_id();
  public:

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // double temperature = 3;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // double humidity = 4;
  void clear_humidity();
  double humidity() const;
  void set_humidity(double value);
  private:
  double _internal_humidity() const;
  void _internal_set_humidity(double value);
  public:

  // double pressure = 5;
  void clear_pressure();
  double pressure() const;
  void set_pressure(double value);
  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);
  public:

  // @@protoc_insertion_point(class_scope:mqtt_comparison.SensorData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_id_;
    double timestamp_;
    double temperature_;
    double humidity_;
    double pressure_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorData

// double timestamp = 1;
inline void SensorData::clear_timestamp() {
  _impl_.timestamp_ = 0;
}
inline double SensorData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double SensorData::timestamp() const {
  // @@protoc_insertion_point(field_get:mqtt_comparison.SensorData.timestamp)
  return _internal_timestamp();
}
inline void SensorData::_internal_set_timestamp(double value) {
  
  _impl_.timestamp_ = value;
}
inline void SensorData::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:mqtt_comparison.SensorData.timestamp)
}

// string sensor_id = 2;
inline void SensorData::clear_sensor_id() {
  _impl_.sensor_id_.ClearToEmpty();
}
inline const std::string& SensorData::sensor_id() const {
  // @@protoc_insertion_point(field_get:mqtt_comparison.SensorData.sensor_id)
  return _internal_sensor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SensorData::set_sensor_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sensor_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mqtt_comparison.SensorData.sensor_id)
}
inline std::string* SensorData::mutable_sensor_id() {
  std::string* _s = _internal_mutable_sensor_id();
  // @@protoc_insertion_point(field_mutable:mqtt_comparison.SensorData.sensor_id)
  return _s;
}
inline const std::string& SensorData::_internal_sensor_id() const {
  return _impl_.sensor_id_.Get();
}
inline void SensorData::_internal_set_sensor_id(const std::string& value) {
  
  _impl_.sensor_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SensorData::_internal_mutable_sensor_id() {
  
  return _impl_.sensor_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SensorData::release_sensor_id() {
  // @@protoc_insertion_point(field_release:mqtt_comparison.SensorData.sensor_id)
  return _impl_.sensor_id_.Release();
}
inline void SensorData::set_allocated_sensor_id(std::string* sensor_id) {
  if (sensor_id != nullptr) {
    
  } else {
    
  }
  _impl_.sensor_id_.SetAllocated(sensor_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensor_id_.IsDefault()) {
    _impl_.sensor_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mqtt_comparison.SensorData.sensor_id)
}

// double temperature = 3;
inline void SensorData::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline double SensorData::_internal_temperature() const {
  return _impl_.temperature_;
}
inline double SensorData::temperature() const {
  // @@protoc_insertion_point(field_get:mqtt_comparison.SensorData.temperature)
  return _internal_temperature();
}
inline void SensorData::_internal_set_temperature(double value) {
  
  _impl_.temperature_ = value;
}
inline void SensorData::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:mqtt_comparison.SensorData.temperature)
}

// double humidity = 4;
inline void SensorData::clear_humidity() {
  _impl_.humidity_ = 0;
}
inline double SensorData::_internal_humidity() const {
  return _impl_.humidity_;
}
inline double SensorData::humidity() const {
  // @@protoc_insertion_point(field_get:mqtt_comparison.SensorData.humidity)
  return _internal_humidity();
}
inline void SensorData::_internal_set_humidity(double value) {
  
  _impl_.humidity_ = value;
}
inline void SensorData::set_humidity(double value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:mqtt_comparison.SensorData.humidity)
}

// double pressure = 5;
inline void SensorData::clear_pressure() {
  _impl_.pressure_ = 0;
}
inline double SensorData::_internal_pressure() const {
  return _impl_.pressure_;
}
inline double SensorData::pressure() const {
  // @@protoc_insertion_point(field_get:mqtt_comparison.SensorData.pressure)
  return _internal_pressure();
}
inline void SensorData::_internal_set_pressure(double value) {
  
  _impl_.pressure_ = value;
}
inline void SensorData::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:mqtt_comparison.SensorData.pressure)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mqtt_comparison

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_5fdata_2eproto
